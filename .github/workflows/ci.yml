name: CI

on: [push, pull_request]

env:
  CARGO_TERM_COLOR: always

jobs:
  lint:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        rust: [stable]
        os: [ubuntu-latest]

    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Cache target
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ matrix.os }}-cargo--${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Install toolchain and components
        run: |
          rustup update
          rustup component add rustfmt clippy
          rustup install ${{ matrix.rust }}

      - name: Toolchain info
        run: |
          cargo --version --verbose
          rustc --version
          cargo clippy --version

      - name: Documentation tests
        run: cargo test --doc --all-features

      - name: Clippy
        run: cargo clippy --all-features -- -W clippy::all -D warnings

      - name: Format
        run: cargo fmt --all -- --check

      - name: Doc Generation
        run: cargo doc --examples --all-features --no-deps

      - name: Build examples
        run: cargo build --examples --release

      - name: Clippy examples
        run: cargo clippy --examples --all-features -- -W clippy::all -D warnings

      - name: Format examples
        working-directory: examples
        run: cargo fmt --all -- --check

  no-std:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        rust: [stable, nightly]
        os: [ubuntu-latest, windows-latest, macos-latest]
        target: [thumbv7em-none-eabi]

    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Cache target
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ matrix.os }}-cargo--${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Install toolchain and components
        run: |
          rustup update
          rustup component add rustfmt clippy
          rustup target add ${{ matrix.target }}
          rustup install ${{ matrix.rust }}

      - name: Toolchain info
        run: |
          cargo --version --verbose
          rustc --version
          cargo clippy --version

      - name: Build debug lib
        run: cargo build --target ${{ matrix.target }}

      - name: Build release lib
        run: cargo build --release --target ${{ matrix.target }}

  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        rust: [stable, nightly]
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Cache target
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ matrix.os }}-cargo--${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Install toolchain and components
        run: |
          rustup update
          rustup component add rustfmt clippy
          rustup install ${{ matrix.rust }}

      - name: Toolchain info
        run: |
          cargo --version --verbose
          rustc --version
          cargo clippy --version

      - name: Test Library
        run: cargo test --all-features -- --test-threads=1

  cross-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        rust: [stable]
        os: [ubuntu-latest]
        target: [armv7-unknown-linux-gnueabihf, s390x-unknown-linux-gnu]

    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Cache target
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ matrix.os }}-cargo--${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Install toolchain and components
        run: |
          rustup update
          rustup component add rustfmt clippy
          rustup target add ${{ matrix.target }}
          rustup install ${{ matrix.rust }}
          cargo install cross

      - name: Toolchain info
        run: |
          cargo --version --verbose
          rustc --version
          cargo clippy --version

      - name: Test Library
        run: cross test --all-features --target ${{ matrix.target }}
